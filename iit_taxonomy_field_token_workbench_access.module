<?php
/**
* @file
* Provides IIT custom tokens for fields added to a workbench access taxonomy
*/

/* ***************************************** */
/* Hook Implementations                      */
/* ***************************************** */

/**
 * Implements hook_token_info(). This hook will register the tokens.
 */
function iit_taxonomy_field_token_workbench_access_token_info() {
  $info['tokens']['node']['workbench-access-field-text'] = array(
    'name' => t('text field on term'),
    'description' => t('text field on term'),
    'dynamic' => TRUE,
  );

  return $info;
}


/**
 * Implements hook_tokens(). This hook will operate the token and replace it with it's value.
 *
 * @param $type
 *   The machine-readable name of the type (group) of token being replaced, such
 *   as 'node', 'user', or another type defined by a hook_token_info()
 *   implementation.
 * @param $tokens
 *   An array of tokens to be replaced. The keys are the machine-readable token
 *   names, and the values are the raw [type:token] strings that appeared in the
 *   original text.
 * @param array $data
 *   (optional) An associative array of data objects to be used when generating
 *   replacement values, as supplied in the $data parameter to token_replace().
 * @param array $options
 *   (optional) An associative array of options for token replacement; see
 *   token_replace() for possible values.
 *
 * @return array An associative array of replacement values, keyed by the raw [type:token]
 * An associative array of replacement values, keyed by the raw [type:token]
 * strings from the original text.
 */
function iit_taxonomy_field_token_workbench_access_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  //$sanitize = !empty($options['sanitize']);

  // Node tokens.
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    // [node:value] dynamic tokens.
    if ($value_tokens = token_find_with_prefix($tokens, 'workbench-access-field-text')) {
      foreach ($value_tokens as $name => $original) {
        if ($sections = _iit_workbench_access_get_node_section_names($node, $name)) {
          /*if ($sanitize) {
            // Run sections through check_plain() if they should be sanitized.
            $sections = array_map('check_plain', $sections);
          }
          $join = isset($options['join']) ? $options['join'] : ', ';*/
          $replacements[$original] = implode("_", $sections);
        } elseif (variable_get('workbench_access_node_type_' . $node->type, 1)) {
          // Output the default unassigned token if the content type is access controlled.
          $replacements[$original] = t('unassigned');
        } else {
          // Output if Workbench Access Control is not enabled for content type
          $replacements[$original] = t('no-workbench-access-on-node');
        }
      }
    }

  }

  return $replacements;
}


/* ***************************************** */
/* Module Local Functions                    */
/* ***************************************** */

/**
 * Fetch an array of a node's access sections for use with tokens.
 *
 * @return array
 *   An array of access section names keyed by access ID.
 */
function _iit_workbench_access_get_node_section_names($node, $field) {
  $sections = &drupal_static(__FUNCTION__, array());

  if (!isset($sections[$node->nid])) {
    $sections[$node->nid] = array();

    if (!empty($node->workbench_access)) {
      $access_type = variable_get('workbench_access');
      foreach ($node->workbench_access as $access_id) {
        $term = taxonomy_term_load($access_id);
        $termFieldObj = field_get_items('taxonomy_term', $term, $field);
        if ($termFieldObj) {
          $fieldValue = $termFieldObj[0]['safe_value'];
          if (!ctype_space($fieldValue)) {
            $sections[$node->nid][$access_id] = _iit_clean_url_string($fieldValue, true);
          } else {
            $info = workbench_access_load($access_type, $access_id);
            $sections[$node->nid][$access_id] = _iit_clean_url_string($info['name'], false);
          }
        } else {
          $info = workbench_access_load($access_type, $access_id);
          $sections[$node->nid][$access_id] = _iit_clean_url_string($info['name'], false);
        }
      }
    }
  }

  return $sections[$node->nid];
}


/**
 * Removes all characters from a string that are not standard
 * letters, numbers, underscores or dashes. Also converts spaces or
 * underscores to dashes and all characters to lowercase.
 * Does not allow multiple dashes in a row. Optional parameter to
 * allow slashes in the url.
 *
 * @param string $text
 *   Text to search against.
 *
 * @param boolean $slashes
 *   Allow slashes in the replacement. Defaults to true.
 *
 * @return string
 *   The string with only letters, numbers, dashes, and optional slashes.
 */
function _iit_clean_url_string($text, $slashes = true) {
  $string = trim($text);
  $string = trim($string, "/");
  $string = str_replace(' ', '-', strtolower($string));
  if ($slashes) {
    $string = preg_replace('/[^A-Za-z0-9_\-\/]/', '', $string);
  } else {
    $string = preg_replace('/\//', '-', $string);
    $string = preg_replace('/[^A-Za-z0-9_\-]/', '', $string);
  }
  $string = preg_replace('/-+/', '-', $string); // Replaces multiple hyphens with single one.

  return $string;
}